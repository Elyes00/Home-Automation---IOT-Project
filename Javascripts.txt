LIGHT

var ENVIRONMENT_IMPACT_DIM = 10;
var VOLUME_AT_RATE = 100000;

var state = 0;	// 0 off, 1 low, 2 high
var lastTimeInSeconds = 0;

function setup() {

	IoEClient.setup({
		type: "Light",
		states: [
		{
			name: "Status",
			type: "options",
			options: {
				"0": "Off",
				"1": "Dim",
				"2": "On"
			},
			controllable: true
		}			
		]
	});
	
	IoEClient.onInputReceive = function(input) {
		processData(input, true);
	};
	
	attachInterrupt(0, function() {
		processData(customRead(0), false);
	});

	state = restoreProperty("state", 0);
	setState(state);
}

function restoreProperty(propertyName, defaultValue)
{
	var value = getDeviceProperty(getName(), propertyName);
	if ( !(value === "" || value == "undefined") ){
		if ( typeof(defaultValue) == "number" )
			value = Number(value);
		
		setDeviceProperty(getName(), propertyName, value);
		return value;
	}
	
	return defaultValue;
}

function mouseEvent(pressed, x, y, firstPress) {
	if (firstPress)
		setState(state+1);
}

function loop() {
	updateEnvironment();

	delay(1000);
}

function processData(data, bIsRemote) {
	if ( data.length <= 0  )
		return;
	setState(parseInt(data));
}

function setState(newState) {
	if (newState >= 3)
		newState = 0;
	state = newState;
	
	analogWrite(A1, state);
	customWrite(0, state);
	IoEClient.reportStates(state);
	setDeviceProperty(getName(), "state", state);
}

function updateEnvironment()
{
	var volumeRatio = VOLUME_AT_RATE / Environment.getVolume();
	if ( state === 0 )
		Environment.setContribution("Visible Light", 0,0);
	else if ( state === 1)
		Environment.setContribution("Visible Light", ENVIRONMENT_IMPACT_DIM*volumeRatio, ENVIRONMENT_IMPACT_DIM*volumeRatio, false);
	else if ( state === 2 )
		Environment.setContribution("Visible Light", ENVIRONMENT_IMPACT_DIM*2*volumeRatio, ENVIRONMENT_IMPACT_DIM*2*volumeRatio, false);
}






FAN 

var FAN_SPEED_LOW = 0.4; // kph
var FAN_SPEED_HIGH = 0.8; // kph
var COOLING_RATE = -1/3600; // -1C/hour
var HUMDITY_REDUCTION_RATE = -1/3600; // -1%/hour

var VOLUME_AT_RATE = 100000;	// the given rates are based on this volume

var state = 0;	// 0 off, 1 low, 2 high
var level = 0;

function setup() {
	
	IoEClient.setup({
		type: "Ceiling Fan",
		states: [
		{
			name: "Status",
			type: "options",
			options: {
				"0": "Off",
				"1": "Low",
				"2": "High"
			},
			controllable: true
		}			
		]
	});
	
	IoEClient.onInputReceive = function(input) {
		processData(input, true);
	};
	
	attachInterrupt(0, function() {
		processData(customRead(0), false);
	});
	
	state = restoreProperty("state", 0);
	setState(state);
}

function restoreProperty(propertyName, defaultValue)
{
	var value = getDeviceProperty(getName(), propertyName);
	if ( !(value === "" || value == "undefined") ){
		if ( typeof(defaultValue) == "number" )
			value = Number(value);
		
		setDeviceProperty(getName(), propertyName, value);
		return value;
	}
	
	return defaultValue;
}

function mouseEvent(pressed, x, y, firstPress) {
	if (firstPress)
		toggleState();
}

function processData(data, bIsRemote)
{
	if ( data.length <= 0  )
		return;
	data = data.split(",");
	setState(parseInt(data[0]));
}

function sendReport()
{
	var report = state;	// comma seperated states
	customWrite(0, report);
	IoEClient.reportStates(report);
	setDeviceProperty(getName(), "state", state);
}

function setState(newState)
{
	analogWrite(A1, newState);
	state = newState;
	
	sendReport();
	updateEnvironment();
}

function toggleState()
{
	++state;
	if ( state >= 3 )
		state = 0;
	
	setState(state);


}

function updateEnvironment()
{
	var volumeRatio = VOLUME_AT_RATE / Environment.getVolume();

	if ( state === 0){
		Environment.setContribution("Wind Speed", 0, 0);
		Environment.setContribution("Ambient Temperature", 0, 0);
		Environment.setContribution("Humidity", 0,0); 
	}
	else if ( state == 1 )
	{
		Environment.setContribution("Wind Speed", FAN_SPEED_LOW, FAN_SPEED_LOW, false);
		
		// everytime the fan restarts, it can do another -100C
		Environment.setContribution("Ambient Temperature", COOLING_RATE/2*volumeRatio, 
			Environment.getCumulativeContribution("Ambient Temperature")-100);

		Environment.setContribution("Humidity", HUMDITY_REDUCTION_RATE/2*volumeRatio, 
			Environment.getCumulativeContribution("Humidity")-100);
			
	}
	else if ( state == 2)
	{
		Environment.setContribution("Wind Speed", FAN_SPEED_HIGH, FAN_SPEED_HIGH, false);
		
		Environment.setContribution("Ambient Temperature", COOLING_RATE/2*volumeRatio, 
			Environment.getCumulativeContribution("Ambient Temperature")-100);
			
		Environment.setContribution("Humidity", HUMDITY_REDUCTION_RATE*volumeRatio, 
			Environment.getCumulativeContribution("Humidity")-100);
	}
		
		
		
}

SIREN

var state = 0; // 0 off, 1 on

function setup() {
	IoEClient.setup({
		type: "Siren",
		states: [{
			name: "On",
			type: "bool",
			controllable: true
		}]
	});
	
	IoEClient.onInputReceive = function(input) {
		processData(input, true);
	};

	attachInterrupt(0, function() {
		processData(customRead(0), false);
	});
	
	state = restoreProperty("state", 0);
	setState(state);
}

function restoreProperty(propertyName, defaultValue)
{
	var value = getDeviceProperty( getName(), propertyName);
	if ( !(value === "" || value == "undefined") ){
		if ( typeof(defaultValue) == "number" )
			value = Number(value);
		
		setDeviceProperty( getName(), propertyName, value);
		return value;
	}
	
	return defaultValue;
}


function mouseEvent(pressed, x, y, firstPress) {
	if (firstPress)
		setState(state ? 0 : 1);
}

function processData(data, bIsRemote) {
	if ( data.length <= 0  )
		return;
	setState(parseInt(data));
}

function setState(newState) {
	
	state = newState;

	digitalWrite(1, state ? HIGH : LOW);
	customWrite(0, state);
	IoEClient.reportStates(state);
	setDeviceProperty( getName(), "state", state);
}


DOOR


var ENVIRONMENTS = ["Argon", "CO", "CO2", "Hydrogen", "Helium", "Methane", "Nitrogen", "O2", "Ozone", "Propane", "Smoke"];
var ENVIRONMENT_MAX_IMPACT = -0.02; // 2% max when door opens
var TEMPERATURE_TRANSFERENCE_MULTIPLIER = 1.25; // increase speed 25% when door open
var HUMIDITY_TRANSFERENCE_MULTIPLIER = 1.25;
var GASES_TRANSFERENCE_MULTIPLIER = 2;

var doorState = 0;	// 0 is closed, 1 is opened
var lockState = 0;  // 0 is unlocked, 1 is locked

function setup () {
	IoEClient.setup({
		type: "Door",
		states: [{
			name: "Open",
			type: "bool"
		}, {
			name: "Lock",
			type: "options",
			options: {
				"0": "Unlock",
				"1": "Lock"
			},
			controllable: true
		}]
	});
	
	IoEClient.onInputReceive = function (input) {
		processData(input, true);
	};
	
	attachInterrupt(0, function () {
		processData(customRead(0), false);
	});
	
	setDoorState(doorState);
	setLockState(lockState);
}

function mouseEvent (pressed, x, y, firstPress) {
	if (firstPress) {
		if ( isPointInRectangle(x, y, 10,40,5,10) )
		{
			if ( lockState === 0 ) {
				setLockState(1);
            } else {
				setLockState(0);
            }
		} else {
			if ( doorState === 0 ) {
				openDoor();
            } else {
				closeDoor();
            }
		}		
	}
}

function loop () {
	
}

function processData (data, bIsRemote) {
	if ( data.length <= 0  ) {
		return;
    }
	Serial.println(data);
	
	data = data.split(",");
	var doorStateData = parseInt(data[0]);
	var lockStateData = parseInt(data[1]);
	if ( lockStateData > -1 ) {
		setLockState(lockStateData);
    }
	
	if ( doorStateData > -1 && !bIsRemote ) {
		if ( doorStateData === 0 ) { 
			closeDoor();
        } else {
			openDoor();
        }
	}
}
function sendReport () {
	var report = doorState+","+lockState;	// comma seperated states
	customWrite(0, report);

	IoEClient.reportStates(report);
	setDeviceProperty(getName(), "door state", doorState);
	setDeviceProperty(getName(), "lock state", lockState);
}

function closeDoor () {
	setDoorState(0);
	updateEnvironment();
}

function openDoor () {
	if ( lockState===0 ) {
		setDoorState(1);
		updateEnvironment();
	} else {
		Serial.println("can't open locked door");
	}
	
	
}

function setDoorState (state) {
	if ( state === 0) {
		digitalWrite(1, LOW);
		setComponentOpacity("led", 1);	// show the led
	} else {
		digitalWrite(1, HIGH);
		setComponentOpacity("led", 0);	// hide the led
	}
	doorState = state;
	sendReport();
}

function setLockState (state) {
	if ( state === 0 ) {
		digitalWrite(2, LOW);
    } else {
		digitalWrite(2, HIGH);
    }
	
	lockState = state;
	sendReport();
}


function updateEnvironment () {
	var rate,max;
	if ( doorState == 1) {
		for (var i=0; i<ENVIRONMENTS.length; i++) {
			max = Environment.get(ENVIRONMENTS[i]) * ENVIRONMENT_MAX_IMPACT;
			// the max is reached in an hour, so we divide by 3600 to get seconds
			// then this rate is also based on 100,000 cubic meters (approx. coporate office size)
			rate = max / 3600 * 100000 / Environment.getVolume();
			Environment.setContribution(ENVIRONMENTS[i], rate, max);
			Environment.setTransferenceMultiplier(ENVIRONMENTS[i], GASES_TRANSFERENCE_MULTIPLIER);
		}
		
		Environment.setTransferenceMultiplier("Ambient Temperature", TEMPERATURE_TRANSFERENCE_MULTIPLIER);
		Environment.setTransferenceMultiplier("Humidity", HUMIDITY_TRANSFERENCE_MULTIPLIER);
	} else {
		for (var i=0; i<ENVIRONMENTS.length; i++) {
			Environment.setContribution(ENVIRONMENTS[i], 0, 0);
			Environment.removeCumulativeContribution(ENVIRONMENTS[i]);
			Environment.setTransferenceMultiplier(ENVIRONMENTS[i], 1);
		}
		Environment.setTransferenceMultiplier("Ambient Temperature", 1);
		Environment.setTransferenceMultiplier("Humidity", 1);
	}
}

function isPointInRectangle (x,y, rx, ry, width, height) {
	if (width <= 0 || height <= 0) {
		return false;
	}
 
	return (x >= rx && x <= rx + width && y >= ry && y <= ry + height);
}



WINDOW

var ENVIRONMENTS = ["Argon", "CO", "CO2", "Hydrogen", "Helium", "Methane", "Nitrogen", "O2", "Ozone", "Propane", "Smoke"];
var ENVIRONMENT_MAX_IMPACT = -0.01; // 2% max when door opens
var TEMPERATURE_TRANSFERENCE_MULTIPLIER = 1.20; // increase speed 25% when door open
var HUMIDITY_TRANSFERENCE_MULTIPLIER = 1.20;
var GASES_TRANSFERENCE_MULTIPLIER = 2;

var state = 0;

//set up client to talk and listen to IoE registration server
function setup() {
	IoEClient.setup({
		type: "Window",
		states: [{
			name: "On",
			type: "bool",
			controllable: true
		}]
	});
	
	IoEClient.onInputReceive = function(input) {
		processData(input, true);
	};
	
	attachInterrupt(0, function() {
		processData(customRead(0), false);
	});
	
	state = restoreProperty("state", 0);
	setState(state);
}

function restoreProperty(propertyName, defaultValue)
{
	var value = getDeviceProperty(getName(), propertyName);
	if ( !(value === "" || value == "undefined") ){
		if ( typeof(defaultValue) == "number" )
			value = Number(value);
		
		setDeviceProperty(getName(), propertyName, value);
		return value;
	}
	
	return defaultValue;
}

function mouseEvent(pressed, x, y, firstPress) {
	if (firstPress)
		setState(state ? 0 : 1);
}

//update carbon dioxide and carbon monoxide and send new data to registration server
function loop() {
	updateEnvironment();	
	delay(1000);
}

//process data received from server
function processData(data, bIsRemote)
{
	if ( data.length <= 0  )
		return;
	data = data.split(",");
	setState(parseInt(data[0]));
}

//set state and update component image to reflect the current state
function setState(newState)
{
	if ( newState === 0 )
		digitalWrite(1, LOW);
	else{
		digitalWrite(1, HIGH);
	}
	state = newState;
	customWrite(0, state);
	IoEClient.reportStates(state);
	setDeviceProperty(getName(), "state", state);
}

function updateEnvironment()
{
	var rate,max;
	if ( state == 1)
	{
		for(var i=0; i<ENVIRONMENTS.length; i++){
			max = Environment.get(ENVIRONMENTS[i]) * ENVIRONMENT_MAX_IMPACT;
			// the max is reached in an hour, so we divide by 3600 to get seconds
			// then this rate is also based on 100,000 cubic meters (approx. coporate office size)
			rate = max / 3600 * 100000 / Environment.getVolume();
			Environment.setContribution(ENVIRONMENTS[i], rate, max);
			Environment.setTransferenceMultiplier(ENVIRONMENTS[i], GASES_TRANSFERENCE_MULTIPLIER);

		}
		
		Environment.setTransferenceMultiplier("Ambient Temperature", TEMPERATURE_TRANSFERENCE_MULTIPLIER);
		Environment.setTransferenceMultiplier("Humidity", HUMIDITY_TRANSFERENCE_MULTIPLIER);
	}
	else
	{
		for(var j=0; j<ENVIRONMENTS.length; j++){
			Environment.setContribution(ENVIRONMENTS[j], 0, 0);
			Environment.removeCumulativeContribution(ENVIRONMENTS[j]);
			Environment.setTransferenceMultiplier(ENVIRONMENTS[j], 1);
		}
		Environment.setTransferenceMultiplier("Ambient Temperature", 1);
		Environment.setTransferenceMultiplier("Humidity", 1);
		
	}
}

WEBCAM

var state = 0;

//set up client to talk and listen to IoE registration server
function setup() {
	
	IoEClient.setup({
		type: "Webcam",
		states: [{
			name: "On",
			type: "bool",
			controllable: true
		},
		{
			name: "Image",
			type: "image"
		}]
	});
	
	IoEClient.onInputReceive = function(input) {
		processData(input, true);
	};
	
	attachInterrupt(0, function() {
		processData(customRead(0), false);
	});
	
	state = restoreProperty("state", 0);
	sendReport();
}

function restoreProperty(propertyName, defaultValue)
{
	var value = getDeviceProperty(getName(), propertyName);
	if ( !(value === "" || value == "undefined") ){
		if ( typeof(defaultValue) == "number" )
			value = Number(value);
		
		setDeviceProperty(getName(), propertyName, value);
		return value;
	}
	
	return defaultValue;
}


function mouseEvent(pressed, x, y, firstPress) {
	if (firstPress)
		setState(state ? 0 : 1);
}

//send captured image file path to registration server
function loop() {
	sendReport();
	delay(1000);
}

//process data received from server
function processData(data, bIsRemote)
{
	if ( data.length <= 0  )
		return;
	data = data.split(",");
	setState(parseInt(data[0]));
}

//send image path to server
var imageLoop=0;
function sendReport()
{
	var report = state + ",";	// comma seperated states
	
	if (state === 0)
		report += '../art/IoE/SmartDevices/camera_off.png';
	else{
		report += '../art/IoE/SmartDevices/camera_image'+imageLoop+'.png';
		imageLoop++;
		if ( imageLoop >= 3)
			imageLoop =0;
	}
	customWrite(0, report);
	IoEClient.reportStates(report);
	setDeviceProperty(getName(), "state", state);
	
}

//set state and update component image to reflect the current state
function setState(newState)
{
	if ( newState === 0 )
		digitalWrite(1, LOW);
	else
		digitalWrite(1, HIGH);
	
	state = newState;
}
